package org.jooq.mcve.test.java.h2;

import custom.CustomType;

import org.jooq.DSLContext;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.h2.tables.records.TestRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;

import static org.jooq.mcve.java.h2.Tables.TEST;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    public Connection connection;
    public DSLContext ctx;

    @Before
    public void setup() throws Exception {
        connection = DriverManager.getConnection("jdbc:h2:~/jooq-mcve-java-2", "sa", "");
        ctx = DSL.using(connection);
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
        ctx = null;
        connection.close();
        connection = null;
    }

    @Test
    public void mcveTest() throws SQLException {

        TestRecord newRecord1 = new TestRecord(1, 42, null);
        newRecord1.attach(ctx.configuration());
        newRecord1.insert();

        // the insert works on 3.18.0, but fails on 3.18.1 with
        // JavaTest.mcveTest:46 Â» IntegrityConstraintViolation SQL [select "ID" from final table (insert into "MCVE"."TEST" ("ID", "CD") values (?, ?)) "TEST"]; NULL not allowed for column "DATA"; SQL statement:
        // select "ID" from final table (insert into "MCVE"."TEST" ("ID", "CD") values (?, ?)) "TEST" [23502-224]

        TestRecord newRecord2 = new TestRecord(2, 999, new CustomType("foo"));
        newRecord2.attach(ctx.configuration());
        newRecord2.insert();

        // see what's in the database
        Statement statement = connection.createStatement();
        String sql = "SELECT * FROM MCVE.TEST";
        ResultSet resultSet = statement.executeQuery(sql);
        while (resultSet.next()) {
            int columnCount = resultSet.getMetaData().getColumnCount();
            for (int i = 1; i <= columnCount; i++) {
                Object value = resultSet.getObject(i);
                String columnType = resultSet.getMetaData().getColumnTypeName(i);
                String columnName = resultSet.getMetaData().getColumnName(i);

                System.out.println(columnName + " (" + columnType + "): " + value);
            }
            System.out.println("----------");
        }
        resultSet.close();
        statement.close();

        TestRecord record1 = ctx.fetchOne(TEST, TEST.CD.eq(42));
        assertNotNull(record1.getId());
        assertEquals(record1.getData(), null);

        TestRecord record2 = ctx.fetchOne(TEST, TEST.CD.eq(999));
        assertNotNull(record2.getId());
        assertEquals(record2.getData().getValue(), "foo");
    }
}
