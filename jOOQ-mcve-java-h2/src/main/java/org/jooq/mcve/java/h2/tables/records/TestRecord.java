/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.h2.tables.records;


import custom.CustomType;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.h2.tables.Test;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> implements Record3<Integer, Integer, CustomType> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>MCVE.TEST.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>MCVE.TEST.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>MCVE.TEST.CD</code>.
     */
    public void setCd(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>MCVE.TEST.CD</code>.
     */
    public Integer getCd() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>MCVE.TEST.DATA</code>.
     */
    public void setData(CustomType value) {
        set(2, value);
    }

    /**
     * Getter for <code>MCVE.TEST.DATA</code>.
     */
    public CustomType getData() {
        return (CustomType) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, CustomType> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, CustomType> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Test.TEST.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Test.TEST.CD;
    }

    @Override
    public Field<CustomType> field3() {
        return Test.TEST.DATA;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getCd();
    }

    @Override
    public CustomType component3() {
        return getData();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getCd();
    }

    @Override
    public CustomType value3() {
        return getData();
    }

    @Override
    public TestRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TestRecord value2(Integer value) {
        setCd(value);
        return this;
    }

    @Override
    public TestRecord value3(CustomType value) {
        setData(value);
        return this;
    }

    @Override
    public TestRecord values(Integer value1, Integer value2, CustomType value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer id, Integer cd, CustomType data) {
        super(Test.TEST);

        setId(id);
        setCd(cd);
        setData(data);
        resetChangedOnNotNull();
    }
}
